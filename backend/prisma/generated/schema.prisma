generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  googleId       String?  @unique
  email          String   @unique
  password       String
  firstName      String
  lastName       String
  avatar         String?
  bio            String?
  location       String?
  phone          String?
  userType       UserType @default(FREELANCER)
  isOnboarded    Boolean  @default(false)
  onboardingStep Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Basic Info (Common)
  country  String?
  city     String?
  timezone String?
  title    String? // Professional title
  overview String? // Professional overview

  // Freelancer specific fields
  skills           Json? // Array of skill objects with name, category, level, yearsOfExperience
  topSkills        String[] // Array of top skill names
  serviceOfferings String[] // Array of service offerings
  hourlyRate       Float?
  portfolio        String?
  experience       String?
  education        Json? // Array of education objects
  workExperience   Json? // Array of work experience objects
  certifications   String[]
  availability     String?
  languages        Json? // Array of language objects with language and proficiency
  socialLinks      Json? // { linkedin, github, website, etc. }

  // Professional Info
  category        String? // Primary category
  subcategory     String? // Subcategory
  experienceLevel String? // entry, intermediate, expert

  // Freelancer performance metrics
  totalEarnings String? // Total earnings as string (e.g., "$127,000+")
  successRate   Int? // Success rate percentage
  completedJobs Int? // Number of completed jobs
  onTime        Int? // On-time delivery percentage
  onBudget      Int? // On-budget delivery percentage
  responseTime  String? // Response time (e.g., "within 1 hour")
  lastActive    String? // Last active status (e.g., "Online now", "2 hours ago")
  topRatedPlus  Boolean @default(false) // Top rated plus status
  verified      Boolean @default(false) // Verification status
  risingTalent  Boolean @default(false) // Rising talent status

  // Additional freelancer fields for Talent page
  portfolioItems  Json? // Array of portfolio items with title, image, description, category
  testScores      Json? // Array of test score objects with name and score
  specializations String[] // Array of specializations
  memberSince     String? // Member since year
  profileStrength Int? // Profile completion percentage
  repeatHireRate  Int? // Repeat hire rate percentage
  rating          Float? // Average rating
  reviewCount     Int? // Number of reviews

  // Enhanced portfolio fields for FreelancerProfile
  portfolioProjects  Json? // Array of portfolio projects with detailed info
  workHistory        Json? // Array of completed work history with client feedback
  employmentHistory  Json? // Array of employment history
  coverImage         String? // Profile cover image
  isOnline           Boolean @default(false) // Online status
  hourlyRateRange    String? // Hourly rate range (e.g., "$75 - $120")
  availabilityStatus String? // Availability status (e.g., "Available - 30+ hrs/week")

  // Client specific fields
  companyName        String?
  companySize        String?
  industry           String?
  companyWebsite     String?
  companyDescription String?
  projectTypes       String[] // Types of projects they typically post
  preferredSkills    String[] // Skills they typically look for
  budgetRange        String? // e.g., "$1000-$5000", "$50-100/hour"

  // Client specific info
  clientType    String? // individual, small-business, medium-business, enterprise, agency, startup
  howDidYouHear String? // How they heard about the platform

  // Additional client fields from onboarding
  interestedCategories    String[] // Categories they're interested in
  urgencyLevel            String? // How urgent their projects typically are
  preferredWorkingStyle   String? // Hands-off, collaborative, hands-on
  communicationPreference String[] // Preferred communication methods
  projectDescription      String? // Description of ideal projects
  paymentPreference       String? // Hourly, fixed, milestone-based, flexible
  projectFrequency        String? // One-time, occasional, regular, ongoing
  averageProjectDuration  String? // Typical project duration
  maxHourlyRate           String? // Maximum hourly rate they're comfortable with
  totalMonthlyBudget      String? // Total monthly budget for regular clients

  // Additional freelancer fields from onboarding
  projectBasedRates    Json? // { small, medium, large }
  hoursPerWeek         String? // Hours available per week
  workingHours         Json? // { start, end }
  workingDays          String[] // Days of the week available
  minimumProjectBudget String? // Minimum project budget they accept
  specialRequirements  String? // Special requirements or notes

  // Verification documents
  idDocument     String? // Government-issued ID document URL
  addressProof   String? // Address proof document URL
  taxInformation String? // Tax information (ID, EIN, VAT number)
  phoneVerified  Boolean @default(false) // Phone verification status

  // Relations
  jobsPosted       Job[]             @relation("JobPoster")
  proposals        Proposal[]        @relation("ProposalAuthor")
  reviews          Review[]          @relation("ReviewAuthor")
  receivedReviews  Review[]          @relation("ReviewReceiver")
  messages         Message[]         @relation("MessageSender")
  receivedMessages Message[]         @relation("MessageReceiver")
  notifications    Notification[]
  savedFreelancers SavedFreelancer[] @relation("SavedByUser")
  savedByUsers     SavedFreelancer[] @relation("SavedFreelancer")

  @@map("users")
}

model Job {
  id                       String         @id @default(cuid())
  title                    String
  description              String
  requirements             String[]
  budget                   BudgetType
  minBudget                Float?
  maxBudget                Float?
  hourlyRate               Float?
  duration                 String?
  skills                   String[]
  category                 String
  subcategory              String?
  projectType              String?
  experienceLevel          String?
  workingHours             String?
  timezone                 String?
  communicationPreferences String[]
  location                 String?
  isRemote                 Boolean        @default(false)
  status                   JobStatus      @default(OPEN)
  isUrgent                 Boolean        @default(false)
  visibility               String         @default("public")
  applicationDeadline      DateTime?
  clientId                 String
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  conversation             Conversation[]

  // Relations
  client    User       @relation("JobPoster", fields: [clientId], references: [id], onDelete: Cascade)
  proposals Proposal[]
  reviews   Review[]

  @@map("jobs")
}

model Proposal {
  id                String         @id @default(cuid())
  coverLetter       String
  bidAmount         Float
  estimatedDuration String
  attachments       String[]
  status            ProposalStatus @default(PENDING)
  jobId             String
  freelancerId      String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Additional fields for enhanced proposal details
  questionResponses Json? // Array of question-response objects
  milestones        Json? // Array of milestone objects with title, duration, amount
  clientNotes       String? // Notes from client about this proposal
  clientViewed      Boolean @default(false) // Whether client has viewed this proposal
  rating            Int? // Rating given by client (1-5)
  interview         Json? // Interview details: { scheduled: boolean, date: string, notes: string }
  originalBudget    Float? // Original budget if freelancer changed their bid
  isShortlisted     Boolean @default(false) // Whether proposal is shortlisted by client

  // Relations
  job        Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  freelancer User @relation("ProposalAuthor", fields: [freelancerId], references: [id], onDelete: Cascade)

  @@map("proposals")
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String
  authorId   String
  receiverId String
  jobId      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  author   User @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  receiver User @relation("ReviewReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  job      Job? @relation(fields: [jobId], references: [id], onDelete: SetNull)

  @@map("reviews")
}

model Conversation {
  id            String   @id @default(cuid())
  participants  String[] // Array of user IDs
  jobId         String? // Optional: link to specific job
  projectName   String? // Name of the project for this conversation
  isActive      Boolean  @default(true) // Whether the conversation is active
  lastMessageId String? // ID of the last message in the conversation
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  job         Job?      @relation(fields: [jobId], references: [id], onDelete: SetNull)
  messages    Message[]
  lastMessage Message?  @relation("ConversationLastMessage", fields: [lastMessageId], references: [id])

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  content        String
  senderEmail    String
  receiverEmail  String
  conversationId String
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  sender                    User           @relation("MessageSender", fields: [senderEmail], references: [email], onDelete: Cascade)
  receiver                  User           @relation("MessageReceiver", fields: [receiverEmail], references: [email], onDelete: Cascade)
  conversation              Conversation   @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationAsLastMessage Conversation[] @relation("ConversationLastMessage")

  @@map("messages")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SavedFreelancer {
  id           String   @id @default(cuid())
  userId       String // User who saved the freelancer
  freelancerId String // Freelancer being saved
  createdAt    DateTime @default(now())

  // Relations
  user       User @relation("SavedByUser", fields: [userId], references: [id], onDelete: Cascade)
  freelancer User @relation("SavedFreelancer", fields: [freelancerId], references: [id], onDelete: Cascade)

  @@unique([userId, freelancerId])
  @@map("saved_freelancers")
}

enum UserType {
  FREELANCER
  CLIENT
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum BudgetType {
  FIXED
  HOURLY
}

enum NotificationType {
  PROPOSAL_RECEIVED
  PROPOSAL_ACCEPTED
  PROPOSAL_REJECTED
  MESSAGE_RECEIVED
  JOB_POSTED
  PAYMENT_RECEIVED
  SYSTEM_UPDATE
}
